{"mappings":"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","sources":["node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-url.js","node_modules/@parcel/runtime-js/lib/runtime-72653cdf008ef6ed.js","src/js/scripts-for-shoppin-list.js","src/js/render-local-storage.js","node_modules/@parcel/runtime-js/lib/runtime-25b10ccc335ebcf2.js","node_modules/@parcel/runtime-js/lib/runtime-d19d0a103290fa57.js","node_modules/@parcel/runtime-js/lib/runtime-b160b9ac3e4a6cc8.js","node_modules/@parcel/runtime-js/lib/runtime-19a6e6da490498fd.js","node_modules/@parcel/runtime-js/lib/runtime-0aa44e65b9603953.js","node_modules/@parcel/runtime-js/lib/runtime-7c4feeb8c13401ad.js","node_modules/@parcel/runtime-js/lib/runtime-ae78c6b236e8da80.js","node_modules/@parcel/runtime-js/lib/runtime-b0f26edbec54ac2f.js","node_modules/@parcel/runtime-js/lib/runtime-f0828d872a5f3c33.js","node_modules/@firebase/storage/src/implementation/error.ts","node_modules/@firebase/storage/src/implementation/location.ts","node_modules/@firebase/storage/src/implementation/fs.ts","node_modules/@firebase/storage/src/implementation/failrequest.ts","node_modules/@firebase/storage/src/implementation/backoff.ts","node_modules/@firebase/storage/src/implementation/request.ts","node_modules/@firebase/storage/src/implementation/string.ts","node_modules/@firebase/storage/src/implementation/blob.ts","node_modules/@firebase/storage/src/implementation/type.ts","node_modules/@firebase/storage/src/implementation/url.ts","node_modules/@firebase/storage/src/implementation/connection.ts","node_modules/@firebase/storage/src/implementation/utils.ts","node_modules/@firebase/storage/src/implementation/requests.ts"],"sourcesContent":["\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","\"use strict\";\n\nvar bundleURL = {};\n\nfunction getBundleURLCached(id) {\n  var value = bundleURL[id];\n\n  if (!value) {\n    value = getBundleURL();\n    bundleURL[id] = value;\n  }\n\n  return value;\n}\n\nfunction getBundleURL() {\n  try {\n    throw new Error();\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|(chrome|moz)-extension):\\/\\/[^)\\n]+/g);\n\n    if (matches) {\n      // The first two stack frames will be this function and getBundleURLCached.\n      // Use the 3rd one, which will be a runtime in the original bundle.\n      return getBaseURL(matches[2]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|(chrome|moz)-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n} // TODO: Replace uses with `new URL(url).origin` when ie11 is no longer supported.\n\n\nfunction getOrigin(url) {\n  var matches = ('' + url).match(/(https?|file|ftp|(chrome|moz)-extension):\\/\\/[^/]+/);\n\n  if (!matches) {\n    throw new Error('Origin not found');\n  }\n\n  return matches[0];\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\nexports.getOrigin = getOrigin;","require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"f1sdc\\\":\\\"shopping-list.789588ad.js\\\",\\\"6ztcb\\\":\\\"amazon@1x.17c4c4f2.png\\\",\\\"1iaLI\\\":\\\"amazon@2x.225c89fa.png\\\",\\\"f8I3T\\\":\\\"apple@1x.bdfd714b.png\\\",\\\"3ZLqn\\\":\\\"apple@2x.93da152b.png\\\",\\\"9Cr2S\\\":\\\"book-shop@1x.926d07c4.png\\\",\\\"8Aq8R\\\":\\\"book-shop@2x.d7c8ffd1.png\\\",\\\"izqLI\\\":\\\"shoping-list-bg@1x.2c75914c.png\\\",\\\"fTufq\\\":\\\"shoping-list-bg@2x.c7e494c9.png\\\",\\\"410VS\\\":\\\"icons.67817c8b.svg\\\",\\\"lxDUL\\\":\\\"shopping-list.2ffdccfe.js\\\"}\"));","import { getBookDetail } from './api-service';\nimport { renderBooksCards } from './render-local-storage';\nimport axios from 'axios';\n\n//import dark/ligth theme\nimport './dark-light-theme';\n\nimport './support';\nimport './firebase/firebase-user';\nimport './user-bar-dropdown';\nimport './authorization-modal';\nimport './modal-menu';\n\n// to-top-button\nimport './to-top';\n","import { refs } from './utility/refs';\nimport { getBookDetail } from './api-service';\nimport axios from 'axios';\n\nimport amazon from '../images/book-modal/amazon@1x.png';\nimport amazon2x from '../images/book-modal/amazon@2x.png';\nimport apple from '../images/book-modal/apple@1x.png';\nimport apple2x from '../images/book-modal/apple@2x.png';\nimport bookShop from '../images/book-modal/book-shop@1x.png';\nimport bookShop2x from '../images/book-modal/book-shop@2x.png';\nimport shoppingList from '../images/shoping-list/shoping-list-bg@1x.png';\nimport shoppingList2x from '../images/shoping-list/shoping-list-bg@2x.png';\nimport icons from '../images/icons.svg';\nimport { ref } from 'firebase/storage';\n\nlet booksId = [];\n\nlocalStorage.getItem('books-id') === null ? noBooksMarkup() : checkLocalBooks();\n\nfunction checkLocalBooks() {\n  let booksFromLocal = localStorage.getItem('books-id');\n  let localBooks = JSON.parse(booksFromLocal);\n\n  if (localBooks.length > 0) {\n    localBooks.forEach(book => {\n      booksId.push(book);\n    });\n    renderBooks();\n  } else {\n    noBooksMarkup();\n  }\n  if (localBooks.length <= 3) {\n    refs.pagination.style.display = 'none';\n  }\n}\n\nfunction renderBooks() {\n  booksId.forEach(book => {\n    bookCardMarkup(book.bookData);\n  });\n}\n\nfunction bookCardMarkup({\n  _id,\n  title,\n  list_name,\n  author,\n  book_image_height,\n  book_image_width,\n  book_image,\n  description,\n  buy_links,\n}) {\n  if (!description) {\n    description = 'N/A';\n  }\n  if (!author) {\n    author = 'N/A';\n  }\n  if (!title) {\n    title = 'N/A';\n  }\n  let amazonLink = '';\n  let appleLink = '';\n  let bookShopLink = '';\n\n  buy_links.forEach(link => {\n    if (link.name === 'Amazon') {\n      amazonLink = link.url;\n    }\n\n    if (link.name === 'Apple Books') {\n      appleLink = link.url;\n    }\n\n    if (link.name === 'Bookshop') {\n      bookShopLink = link.url;\n    }\n  });\n  refs.shoppingList.insertAdjacentHTML(\n    'beforeend',\n    `<li class=\"shoplist__item\">\n  <div class=\"book__container\" data-id=${_id}>\n    <div class=\"book__img-container\">\n      <img class=\"book__img\" src=${book_image} alt=${title} width=${book_image_width} height=${book_image_height} />\n    </div>\n    <p class=\"book__author\">${author}</p>\n    <div class=\"book-title\">\n      <h2 class=\"book-title__title\">${title}</h2>\n      <h3 class=\"book-title__category\">${list_name}</h3>\n    </div>\n    <div class=\"book-links\">\n      <a href=\"${amazonLink}\" class=\"book-links__link\" target=\"_blank\">\n        <picture>\n          <source\n            srcset=\"${amazon}, ${amazon2x}\"\n          />\n          <img\n            class=\"img\"\n            src=\"./images/book-modal/amazon@1x.png\"\n            alt=\"amazon\"\n            width=\"48\"\n          />\n        </picture>\n      </a>\n      <a href=${appleLink} class=\"book-links__link\" target=\"_blank\">\n        <picture>\n          <source\n            srcset=\"${apple}, ${apple2x}\"\n          />\n          <img\n            class=\"img\"\n            src=\"./images/book-modal/apple@1x.png\"\n            alt=\"apple\"\n            width=\"28\"\n          />\n        </picture>\n      </a>\n      <a href=${bookShopLink} class=\"book-links__link\" target=\"_blank\">\n        <picture>\n          <source\n            srcset=\"${bookShop}, ${bookShop2x}\"\n          />\n          <img\n            class=\"img\"\n            src=\"./images/book-modal/book-shop@1x.png\"\n            alt=\"book-shop\"\n            width=\"32\"\n          />\n        </picture>\n      </a>\n    </div>\n    <p class=\"book-overview\">${description}</p>\n    <button class=\"trash-btn\" type=\"button\">\n    <svg class=\"trash-btn__icon\" width=\"28\" height=\"28\">\n      <use class=\"js-delete-book\" href=\"${icons}#delete-book\"></use>\n    </svg>\n  </button>\n  </div>\n</li>`\n  );\n}\n\nfunction noBooksMarkup() {\n  refs.shoppingList.insertAdjacentHTML(\n    'beforeend',\n    `<div class=\"shoplist__list-background\">\n          <p class=\"shoplist__list-background-text\">\n            This page is empty, add some books and proceed to order.\n          </p>\n          <picture>\n            <source\n              srcset=\"${shoppingList}, ${shoppingList2x}\"\n            />\n            <img class=\"shoplist__list-background-img\"\n              src=\"${shoppingList}\"\n              alt=\"Add some books\"\n            />\n          </picture>\n        </div>`\n  );\n}\n\nrefs.shoppingList.addEventListener('click', e => {\n  if (e.target.classList.contains('js-delete-book')) {\n    const curBookId = e.target.closest('.book__container').dataset.id;\n    booksId.forEach((book, index) => {\n      if (book.bookId === curBookId) {\n        booksId.splice(index, 1);\n        e.target.closest('.shoplist__item').remove();\n        updateLocal();\n      }\n    });\n\n    if (booksId.length < 1) {\n      noBooksMarkup();\n      refs.pagination.style.display = 'none';\n    }\n  }\n});\n\nfunction updateLocal() {\n  localStorage.setItem('books-id', JSON.stringify(booksId));\n}\n","module.exports = require('./helpers/bundle-url').getBundleURL('f1sdc') + require('./helpers/bundle-manifest').resolve(\"6ztcb\");","module.exports = require('./helpers/bundle-url').getBundleURL('f1sdc') + require('./helpers/bundle-manifest').resolve(\"1iaLI\");","module.exports = require('./helpers/bundle-url').getBundleURL('f1sdc') + require('./helpers/bundle-manifest').resolve(\"f8I3T\");","module.exports = require('./helpers/bundle-url').getBundleURL('f1sdc') + require('./helpers/bundle-manifest').resolve(\"3ZLqn\");","module.exports = require('./helpers/bundle-url').getBundleURL('f1sdc') + require('./helpers/bundle-manifest').resolve(\"9Cr2S\");","module.exports = require('./helpers/bundle-url').getBundleURL('f1sdc') + require('./helpers/bundle-manifest').resolve(\"8Aq8R\");","module.exports = require('./helpers/bundle-url').getBundleURL('f1sdc') + require('./helpers/bundle-manifest').resolve(\"izqLI\");","module.exports = require('./helpers/bundle-url').getBundleURL('f1sdc') + require('./helpers/bundle-manifest').resolve(\"fTufq\");","module.exports = require('./helpers/bundle-url').getBundleURL('f1sdc') + require('./helpers/bundle-manifest').resolve(\"410VS\");","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseError } from '@firebase/util';\n\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class StorageError extends FirebaseError {\n  private readonly _baseMessage: string;\n  /**\n   * Stores custom error data unique to the `StorageError`.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A `StorageErrorCode` string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   * @param status_ - Corresponding HTTP Status Code\n   */\n  constructor(code: StorageErrorCode, message: string, private status_ = 0) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    this._baseMessage = this.message;\n    // Without this, `instanceof StorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, StorageError.prototype);\n  }\n\n  get status(): number {\n    return this.status_;\n  }\n\n  set status(status: number) {\n    this.status_ = status;\n  }\n\n  /**\n   * Compares a `StorageErrorCode` against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n    if (this.customData.serverResponse) {\n      this.message = `${this._baseMessage}\\n${this.customData.serverResponse}`;\n    } else {\n      this.message = this._baseMessage;\n    }\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `StorageError` objects.\n */\nexport enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  UNAUTHORIZED_APP = 'unauthorized-app',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): StorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new StorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): StorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new StorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorizedApp(): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED_APP,\n    'This app does not have permission to access Firebase Storage on this project.'\n  );\n}\n\nexport function unauthorized(path: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): StorageError {\n  return new StorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): StorageError {\n  return new StorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): StorageError {\n  return new StorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): StorageError {\n  return new StorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function missingPolyFill(polyFill: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    `${polyFill} is missing. Make sure to install the required polyfills. See https://firebase.google.com/docs/web/environments-js-sdk#polyfills for more information.`\n  );\n}\n\n/**\n * @internal\n */\nexport function invalidArgument(message: string): StorageError {\n  return new StorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): StorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new StorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): StorageError {\n  return new StorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n *\n * @internal\n */\nexport function invalidRootOperation(name: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(format: string, message: string): StorageError {\n  return new StorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): StorageError {\n  throw new StorageError(StorageErrorCode.UNSUPPORTED_ENVIRONMENT, message);\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): StorageError {\n  throw new StorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string, host: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString, host);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string, host: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = host.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      host === DEFAULT_HOST\n        ? '(?:storage.googleapis.com|storage.cloud.google.com)'\n        : host;\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, StorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new StorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { StorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: StorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * Accepts a callback for an action to perform (`doRequest`),\n * and then a callback for when the backoff has completed (`backoffCompleteCb`).\n * The callback sent to start requires an argument to call (`onRequestComplete`).\n * When `start` calls `doRequest`, it passes a callback for when the request has\n * completed, `onRequestComplete`. Based on this, the backoff continues, with\n * another call to `doRequest` and the above loop continues until the timeout\n * is hit, or a successful response occurs.\n * @description\n * @param doRequest Callback to perform request\n * @param backoffCompleteCb Callback to call when backoff has been completed\n */\nexport function start(\n  doRequest: (\n    onRequestComplete: (success: boolean) => void,\n    canceled: boolean\n  ) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  backoffCompleteCb: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let retryTimeoutId: any = null;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let globalTimeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      backoffCompleteCb.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    retryTimeoutId = setTimeout(() => {\n      retryTimeoutId = null;\n      doRequest(responseHandler, canceled());\n    }, millis);\n  }\n\n  function clearGlobalTimeout(): void {\n    if (globalTimeoutId) {\n      clearTimeout(globalTimeoutId);\n    }\n  }\n\n  function responseHandler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      clearGlobalTimeout();\n      return;\n    }\n    if (success) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      clearGlobalTimeout();\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    clearGlobalTimeout();\n    if (triggeredCallback) {\n      return;\n    }\n    if (retryTimeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(retryTimeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  globalTimeoutId = setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { id as backoffId, start, stop } from './backoff';\nimport { appDeleted, canceled, retryLimitExceeded, unknown } from './error';\nimport { ErrorHandler, RequestHandler, RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Connection, ErrorCode, Headers, ConnectionType } from './connection';\nimport { isRetryStatusCode } from './utils';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\n/**\n * Handles network logic for all Storage Requests, including error reporting and\n * retries with backoff.\n *\n * @param I - the type of the backend's network response.\n * @param - O the output type used by the rest of the SDK. The conversion\n * happens in the specified `callback_`.\n */\nclass NetworkRequest<I extends ConnectionType, O> implements Request<O> {\n  private pendingConnection_: Connection<I> | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: O | PromiseLike<O>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private promise_: Promise<O>;\n\n  constructor(\n    private url_: string,\n    private method_: string,\n    private headers_: Headers,\n    private body_: string | Blob | Uint8Array | null,\n    private successCodes_: number[],\n    private additionalRetryCodes_: number[],\n    private callback_: RequestHandler<I, O>,\n    private errorCallback_: ErrorHandler | null,\n    private timeout_: number,\n    private progressCallback_: ((p1: number, p2: number) => void) | null,\n    private connectionFactory_: () => Connection<I>,\n    private retry = true\n  ) {\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: O | PromiseLike<O>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const doTheRequest: (\n      backoffCallback: (success: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ) => void = (backoffCallback, canceled) => {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const connection = this.connectionFactory_();\n      this.pendingConnection_ = connection;\n\n      const progressListener: (\n        progressEvent: ProgressEvent\n      ) => void = progressEvent => {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (this.progressCallback_ !== null) {\n          this.progressCallback_(loaded, total);\n        }\n      };\n      if (this.progressCallback_ !== null) {\n        connection.addUploadProgressListener(progressListener);\n      }\n\n      // connection.send() never rejects, so we don't need to have a error handler or use catch on the returned promise.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      connection\n        .send(this.url_, this.method_, this.body_, this.headers_)\n        .then(() => {\n          if (this.progressCallback_ !== null) {\n            connection.removeUploadProgressListener(progressListener);\n          }\n          this.pendingConnection_ = null;\n          const hitServer = connection.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = connection.getStatus();\n          if (\n            !hitServer ||\n            (isRetryStatusCode(status, this.additionalRetryCodes_) &&\n              this.retry)\n          ) {\n            const wasCanceled = connection.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = this.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, connection));\n        });\n    };\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    const backoffDone: (\n      requestWentThrough: boolean,\n      status: RequestEndStatus<I>\n    ) => void = (requestWentThrough, status) => {\n      const resolve = this.resolve_;\n      const reject = this.reject_;\n      const connection = status.connection as Connection<I>;\n      if (status.wasSuccessCode) {\n        try {\n          const result = this.callback_(connection, connection.getResponse());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (connection !== null) {\n          const err = unknown();\n          err.serverResponse = connection.getErrorText();\n          if (this.errorCallback_) {\n            reject(this.errorCallback_(connection, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = this.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    };\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<O> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingConnection_ !== null) {\n      this.pendingConnection_.abort();\n    }\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus<I extends ConnectionType> {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public connection: Connection<I> | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function addAppCheckHeader_(\n  headers: Headers,\n  appCheckToken: string | null\n): void {\n  if (appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = appCheckToken;\n  }\n}\n\nexport function makeRequest<I extends ConnectionType, O>(\n  requestInfo: RequestInfo<I, O>,\n  appId: string | null,\n  authToken: string | null,\n  appCheckToken: string | null,\n  requestFactory: () => Connection<I>,\n  firebaseVersion?: string,\n  retry = true\n): Request<O> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  addAppCheckHeader_(headers, appCheckToken);\n  return new NetworkRequest<I, O>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    requestFactory,\n    retry\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\nimport { decodeBase64 } from '../platform/base64';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = typeof StringFormat[keyof typeof StringFormat];\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n} as const;\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\n/**\n * @internal\n */\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = decodeBase64(value);\n  } catch (e) {\n    if ((e as Error).message.includes('polyfill')) {\n      throw e;\n    }\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isNode } from '@firebase/util';\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  // Note: The `isNode()` check can be removed when `node-fetch` adds native Blob support\n  // PR: https://github.com/node-fetch/node-fetch/pull/1664\n  return typeof Blob !== 'undefined' && !isNode();\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(\n  urlPart: string,\n  host: string,\n  protocol: string\n): string {\n  let origin = host;\n  if (protocol == null) {\n    origin = `https://${host}`;\n  }\n  return `${protocol}://${origin}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Network headers */\nexport type Headers = Record<string, string>;\n\n/** Response type exposed by the networking APIs. */\nexport type ConnectionType =\n  | string\n  | ArrayBuffer\n  | Blob\n  | NodeJS.ReadableStream;\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n *\n * You can create a new connection by invoking `newTextConnection()`,\n * `newBytesConnection()` or `newStreamConnection()`.\n */\nexport interface Connection<T extends ConnectionType> {\n  /**\n   * Sends a request to the provided URL.\n   *\n   * This method never rejects its promise. In case of encountering an error,\n   * it sets an error code internally which can be accessed by calling\n   * getErrorCode() by callers.\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<void>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponse(): T;\n\n  getErrorText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Checks the status code to see if the action should be retried.\n *\n * @param status Current HTTP status code returned by server.\n * @param additionalRetryCodes additional retry codes to check against\n */\nexport function isRetryStatusCode(\n  status: number,\n  additionalRetryCodes: number[]\n): boolean {\n  // The codes for which to retry came from this page:\n  // https://cloud.google.com/storage/docs/exponential-backoff\n  const isFiveHundredCode = status >= 500 && status < 600;\n  const extraRetryCodes = [\n    // Request Timeout: web server didn't receive full request in time.\n    408,\n    // Too Many Requests: you're getting rate-limited, basically.\n    429\n  ];\n  const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n  const isAdditionalRetryCode = additionalRetryCodes.indexOf(status) !== -1;\n  return isFiveHundredCode || isExtraRetryCode || isAdditionalRetryCode;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  StorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown,\n  unauthorizedApp\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { Connection, ConnectionType } from './connection';\nimport { FirebaseStorageImpl } from '../service';\n\n/**\n * Throws the UNKNOWN StorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => Metadata {\n  function handler(xhr: Connection<string>, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: FirebaseStorageImpl,\n  bucket: string\n): (p1: Connection<string>, p2: string) => ListResult {\n  function handler(xhr: Connection<string>, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: FirebaseStorageImpl,\n  mappings: Mappings\n): (p1: Connection<string>, p2: string) => string | null {\n  function handler(xhr: Connection<string>, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(\n      metadata as Metadata,\n      text,\n      service.host,\n      service._protocol\n    );\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr: StorageError;\n    if (xhr.getStatus() === 401) {\n      if (\n        // This exact message string is the only consistent part of the\n        // server's error response that identifies it as an App Check error.\n        xhr.getErrorText().includes('Firebase App Check token is invalid')\n      ) {\n        newErr = unauthorizedApp();\n      } else {\n        newErr = unauthenticated();\n      }\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.status = xhr.getStatus();\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: Connection<ConnectionType>, p2: StorageError) => StorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: Connection<ConnectionType>,\n    err: StorageError\n  ): StorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: FirebaseStorageImpl,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<string, ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getBytes<I extends ConnectionType>(\n  service: FirebaseStorageImpl,\n  location: Location,\n  maxDownloadSizeBytes?: number\n): RequestInfo<I, I> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol) + '?alt=media';\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    (_: Connection<I>, data: I) => data,\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  if (maxDownloadSizeBytes !== undefined) {\n    requestInfo.headers['Range'] = `bytes=0-${maxDownloadSizeBytes}`;\n    requestInfo.successCodes = [200 /* OK */, 206 /* Partial Content */];\n  }\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string, string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: FirebaseStorageImpl,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<string, Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: FirebaseStorageImpl,\n  location: Location\n): RequestInfo<string, void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: Connection<string>, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(\n  xhr: Connection<string>,\n  allowed?: string[]\n): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: FirebaseStorageImpl,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string, string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart, service.host, service._protocol);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': `${blob.size()}`,\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: Connection<string>): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: FirebaseStorageImpl,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<string, ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: Connection<string>): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: FirebaseStorageImpl,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<string, ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  let uploadCommand = '';\n  if (bytesToUpload === 0) {\n    uploadCommand = 'finalize';\n  } else if (bytesLeft === bytesToUpload) {\n    uploadCommand = 'upload, finalize';\n  } else {\n    uploadCommand = 'upload';\n  }\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': `${status_.current}`\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(\n    xhr: Connection<string>,\n    text: string\n  ): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n"],"names":["$0380ce8f1f064ccc$export$6503ec6e8aabbaf","$0380ce8f1f064ccc$export$f7ad0328861e2f03","$0380ce8f1f064ccc$var$mapping","pairs","keys","Object","i","length","id","resolved","Error","$7dd1ddf6834435ca$export$bdfd709ae4826697","$7dd1ddf6834435ca$var$bundleURL","$7dd1ddf6834435ca$var$getBaseURL","url","replace","value","err","matches","stack","match","$7dd1ddf6834435ca$var$getBundleURL","parcelRequire","register","JSON","parse","$kVdBw","$3ca5bc79c0bfb432$exports","getBundleURL","resolve","$e761acff92c6352e$exports","$d7aa5543d23b777f$exports","$0d400f2fec7c84ec$exports","$7c44fbe6e4f24c7e$exports","$5a3c03573a98bbea$exports","$72b824ebd4c42553$exports","$3b2dd1f9d9db2e38$exports","$85b8b451de8714b0$exports","$fbdc0445c4dba8ef$export$54592d666d6ce114","StorageErrorCode1","$fbdc0445c4dba8ef$export$697502632950e9d3","FirebaseError1","_super","$parcel$interopDefault","$2MbLg","StorageError","code","message","_this","status_","arguments","$8MBJY","this","call","$fbdc0445c4dba8ef$var$prependCode","concat","customData","serverResponse","_baseMessage","setPrototypeOf","$ds8z5","prototype","$a2hTj","key","get","set","status","$2xDiJ","FirebaseError","$fbdc0445c4dba8ef$var$unknown","UNKNOWN","RETRY_LIMIT_EXCEEDED","INVALID_ARGUMENT","$fbdc0445c4dba8ef$var$ErrorCode","ErrorCode1","path","Location","bucket","path_","encode","encodeURIComponent","bucketLocation","makeFromUrl","bucketString","host","e","location","httpModify","loc","decodeURIComponent","firebaseStorageHost","groups","regex","gsRegex","indices","postModify","charAt","slice","RegExp","bucketDomain","$fbdc0445c4dba8ef$var$DEFAULT_HOST","group","captures","exec","bucketValue","pathValue","INVALID_URL","$fbdc0445c4dba8ef$var$invalidUrl","$fbdc0445c4dba8ef$var$FailRequest","FailRequest","error","promise_","Promise","reject","argument","minValue","maxValue","$fbdc0445c4dba8ef$var$makeQueryString","params","queryPart","hasOwnProperty","$fbdc0445c4dba8ef$var$isRetryStatusCode","additionalRetryCodes","indexOf","isAdditionalRetryCode","isFiveHundredCode","isExtraRetryCode","NetworkRequest","url_","method_","headers_","retry","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","timeout_","progressCallback_","connectionFactory_","pendingConnection_","backoffId_","canceled_","appDelete_","resolve_","reject_","backoffDone","requestWentThrough","connection","wasSuccessCode","result","getResponse","canceled","$fbdc0445c4dba8ef$var$appDeleted","$fbdc0445c4dba8ef$var$canceled","$fbdc0445c4dba8ef$var$retryLimitExceeded","$fbdc0445c4dba8ef$var$RequestEndStatus","doRequest","backoffCompleteCb","timeout","waitSeconds","retryTimeoutId","globalTimeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","_len","args","Array","_key","apply","callWithDelay","millis","setTimeout","responseHandler","canceled1","clearGlobalTimeout","clearTimeout","success","_triggerCallback","_triggerCallback1","waitMillis","$8nrFW","Math","random","$fbdc0445c4dba8ef$var$start","backoffCallback","canceled2","_this1","progressListener","progressEvent","loaded","total","lengthComputable","addUploadProgressListener","send","then","removeUploadProgressListener","hitServer","wasCanceled","getErrorCode","ABORT","successCode","appDelete","RequestEndStatus","canceled3","headers","authToken","firebaseVersion","appId","requestInfo","appCheckToken","requestFactory","urlParams","method","body","successCodes","handler","errorHandler","progressCallback","index","lastIndexOf","name1","INVALID_ROOT_OPERATION","$465327b9c472184d$var$booksId","$465327b9c472184d$var$noBooksMarkup","refs","shoppingList","insertAdjacentHTML","localStorage","getItem","booksFromLocal","localBooks","forEach","book","push","param","_id","title","list_name","author","book_image_height","book_image_width","book_image","description","buy_links","amazonLink","appleLink","bookShopLink","link","name","$465327b9c472184d$var$bookCardMarkup","bookData","pagination","style","display","$465327b9c472184d$var$checkLocalBooks","addEventListener","target","classList","contains","curBookId","closest","dataset","bookId","splice","remove","setItem","stringify"],"version":3,"file":"shopping-list.789588ad.js.map"}